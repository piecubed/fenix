DROP FUNCTION IF EXISTS addReaction;
CREATE FUNCTION addReaction(mID integer, uID integer, cID integer, unicode text) RETURNS integer AS $$
DECLARE
    reactionID integer;
BEGIN
    SELECT canTalk, canAddReactions FROM ChannelPermissions WHERE channelID = cID AND userID = uID;
    IF (canAddReactions AND canTalk) THEN
        IF ARRAY_LENGTH(
                (SELECT reactions FROM Messages WHERE messageID = mID)) = 0 THEN -- If there are no reactions, add a reaction row for this message.


            INSERT INTO Reactions(unicode, messageID, users) VALUES (unicode, mID, (uID)) RETURNING reactionID INTO reactionID;

            UPDATE Messages SET
                    reactions = (reactionID)
                WHERE messageID = mID AND userID = uID;

            RETURN reactionID;
        END IF;
    END IF;
END; $$
LANGUAGE PLPGSQL;

DROP FUNCTION IF EXISTS createRole;
CREATE FUNCTION createRole(roleName text, colorRGB text, sID integer, actor integer) RETURNS Table(
    roleID INT,
    serverID TEXT,
    name TEXT,
    color TEXT
) AS $$
BEGIN
    SELECT assignRoles FROM ServerRegistration WHERE serverID = sID and userID = actor;
    IF (assignRoles) THEN
        RETURN QUERY INSERT INTO Roles (serverID, name, color) VALUES (sID, roleName, colorRGB) RETURNING *;
    ELSE
        RAISE EXCEPTION 'No assignroles perm';
    END IF;
END; $$
LANGUAGE PLPGSQL;

DROP FUNCTION IF EXISTS sendMessage;
CREATE FUNCTION sendMessage(cID integer, uID integer, content text) RETURNS Table(
    messageID INT,
    channelID INT,
    userID INT,
    contents TEXT,
    stamp TIMESTAMP,
    pinned BOOLEAN,
    reactions TEXT[]
) AS $$
BEGIN
    SELECT canTalk FROM ChannelPermissions WHERE channelID = cID AND userID = uID;
    IF (canTalk) THEN
        RETURN QUERY INSERT INTO Messages (cID, userID, content, stamp) VALUES (cID, uID, content, CURRENT_TIMESTAMP) RETURNING *;
    ELSE
        RAISE EXCEPTION 'No canTalk perm';
    END IF;
END; $$
LANGUAGE PLPGSQL;

DROP FUNCTION IF EXISTS editMessage;
CREATE FUNCTION editMessage(content text, mID integer, uID integer, cID integer) RETURNS Table(
    messageID INT,
    channelID INT,
    userID INT,
    contents TEXT,
    stamp TIMESTAMP,
    pinned BOOLEAN,
    reactions TEXT[]
) AS $$
BEGIN
    SELECT canTalk FROM ChannelPermissions WHERE channelID = cID AND userID = uID;
    IF (canTalk) THEN
        RETURN QUERY UPDATE Messages SET content = content WHERE messageID = mID RETURNING *;
    ELSE
        RAISE EXCEPTION 'No canTalk perm';
    END IF;
END; $$
LANGUAGE PLPGSQL;

DROP FUNCTION IF EXISTS deleteMessage;
CREATE FUNCTION deleteMessage(mID integer, uID integer, cID integer, actor integer) RETURNS void AS $$
BEGIN
    SELECT canDeleteMessages FROM ChannelPermissions WHERE channelID = cID AND userID = actor;

    IF (canDeleteMessages OR uID = actor) THEN
        DELETE FROM Messages WHERE messageID = mID;
    ELSE
        RAISE EXCEPTION 'No deletemessage perm';
    END IF;
END; $$
LANGUAGE PLPGSQL;

DROP FUNCTION IF EXISTS pinMessage;
CREATE FUNCTION pinMessage(mID integer, cID integer, actor integer, toPin boolean) RETURNS Table(
    messageID INT,
    channelID INT,
    userID INT,
    contents TEXT,
    stamp TIMESTAMP,
    pinned BOOLEAN,
    reactions TEXT[]
) AS $$
BEGIN
    SELECT canPinMessages FROM ChannelPermissions WHERE channelID = cID AND userID = actor;

    IF (canPinMessages) THEN
        RETURN QUERY UPDATE Messages SET pinned = toPin WHERE messageID = mID RETURNING *;
    ELSE
        RAISE EXCEPTION 'No pinmessage perm';
    END IF;
END; $$
LANGUAGE PLPGSQL;