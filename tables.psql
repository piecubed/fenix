DROP TABLE IF EXISTS Users;

CREATE TABLE Users(
    userID SERIAL PRIMARY KEY,
    username TEXT NOT NULL,
    password BYTEA NOT NULL,
    email TEXT NOT NULL UNIQUE,
    salt BYTEA NOT NULL,
    settings JSON,
    token TEXT NOT NULL UNIQUE,
    usernameHash SERIAL UNIQUE,
    createdAt TIMESTAMP NOT NULL,
    verified BOOLEAN NOT NULL,
);

DROP TABLE IF EXISTS Channels;
CREATE TABLE Channels(
    channelID SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    serverID INT NOT NULL,
    createdAt TIMESTAMP NOT NULL
);

DROP TABLE IF EXISTS FocusedChannels;
CREATE TABLE FocusedChannels (
    sessionID TEXT PRIMARY KEY,
    channelID INT,
    userID INT
);

DROP TABLE IF EXISTS Servers;
CREATE TABLE Servers(
    serverID SERIAL PRIMARY KEY,
    ownerID INT NOT NULL,
    createdAt TIMESTAMP NOT NULL,
    name TEXT NOT NULL,
    icon TEXT,
    joinChannel INT
);

DROP TABLE IF EXISTS Messages;
CREATE TABLE Messages(
    messageID SERIAL PRIMARY KEY,
    channelID INT NOT NULL,
    userID INT NOT NULL,
    contents TEXT NOT NULL,
    stamp TIMESTAMP NOT NULL,
    pinned BOOLEAN NOT NULL DEFAULT FALSE,
    reactions TEXT[] NOT NULL DEFAULT '{}'
);

DROP TABLE IF EXISTS Reactions;
CREATE TABLE Reactions(
    reactionID SERIAL PRIMARY KEY,
    unicode TEXT NOT NULL,
    messageID INT NOT NULL,
    users INT[] NOT NULL
);

DROP TABLE IF EXISTS ServerRegistration;
CREATE TABLE ServerRegistration(
    userID INT NOT NULL,
    serverID INT NOT NULL,
    roles TEXT[] NOT NULL DEFAULT '{}',
    admin BOOLEAN NOT NULL DEFAULT FALSE,
    addChannels BOOLEAN NOT NULL DEFAULT FALSE,
    assignRoles BOOLEAN NOT NULL DEFAULT FALSE,
    kick BOOLEAN NOT NULL DEFAULT FALSE,
    ban BOOLEAN NOT NULL DEFAULT FALSE,
    changeNick BOOLEAN NOT NULL DEFAULT TRUE,
    changeOthersNick BOOLEAN NOT NULL DEFAULT FALSE
);

DROP TABLE IF EXISTS Roles;
CREATE TABLE Roles(
    roleID SERIAL PRIMARY KEY,
    serverID TEXT NOT NULL,
    name TEXT NOT NULL,
    color TEXT NOT NULL
);

DROP TABLE IF EXISTS ChannelPermissions;
CREATE TABLE ChannelPermissions(
    userID INT NOT NULL,
    channelID INT NOT NULL,
    canRead BOOLEAN NOT NULL DEFAULT TRUE,
    canTalk BOOLEAN NOT NULL DEFAULT TRUE,
    canReadHistory BOOLEAN NOT NULL DEFAULT TRUE,
    canDeleteMessages BOOLEAN NOT NULL DEFAULT FALSE,
    canAddReactions BOOLEAN NOT NULL DEFAULT FALSE,
    canManageChannel BOOLEAN NOT NULL DEFAULT FALSE,
    canManagePermissions BOOLEAN NOT NULL DEFAULT FALSE,
    canPinMessages BOOLEAN NOT NULL DEFAULT FALSE,
    canMentionEveryone BOOLEAN NOT NULL DEFAULT FALSE
);

DROP TABLE IF EXISTS Bots;
CREATE TABLE Bots(
    botID SERIAL PRIMARY KEY,
    ownerID TEXT NOT NULL,
    createdAt TIMESTAMP NOT NULL,
    username TEXT NOT NULL UNIQUE,
    token TEXT NOT NULL UNIQUE,
    ownerEmail TEXT NOT NULL
);

DROP FUNCTION IF EXISTS addReaction;
CREATE FUNCTION addReaction(mID integer, uID integer, cID integer, unicode text) RETURNS integer AS $$
DECLARE
    reactionID integer;
BEGIN
    SELECT canTalk, canAddReactions FROM ChannelPermissions WHERE channelID = cID AND userID = uID;
    IF (canAddReactions AND canTalk) THEN
        IF ARRAY_LENGTH(
                (SELECT reactions FROM Messages WHERE messageID = mID)) = 0 THEN -- If there are no reactions, add a reaction row for this message.


            INSERT INTO Reactions(unicode, messageID, users) VALUES (unicode, mID, (uID)) RETURNING reactionID INTO reactionID;

            UPDATE Messages SET
                    reactions = (reactionID)
                WHERE messageID = mID AND userID = uID;

            RETURN reactionID;
        END IF;
    END IF;
END; $$
LANGUAGE PLPGSQL;

DROP FUNCTION IF EXISTS createRole;
CREATE FUNCTION createRole(roleName text, colorRGB text, sID integer, actor integer) RETURNS Table(
    roleID INT,
    serverID TEXT,
    name TEXT,
    color TEXT
) AS $$
BEGIN
    SELECT assignRoles FROM ServerRegistration WHERE serverID = sID and userID = actor;
    IF (assignRoles) THEN
        RETURN QUERY INSERT INTO Roles (serverID, name, color) VALUES (sID, roleName, colorRGB) RETURNING *;
    ELSE
        RAISE EXCEPTION 'No assignroles perm';
    END IF;
END; $$
LANGUAGE PLPGSQL;

DROP FUNCTION IF EXISTS sendMessage;
CREATE FUNCTION sendMessage(cID integer, uID integer, content text) RETURNS Table(
    messageID INT,
    channelID INT,
    userID INT,
    contents TEXT,
    stamp TIMESTAMP,
    pinned BOOLEAN,
    reactions TEXT[]
) AS $$
BEGIN

    IF (SELECT canTalk FROM ChannelPermissions WHERE ChannelPermissions.channelID = cID AND ChannelPermissions.userID = uID) THEN
        RETURN QUERY INSERT INTO Messages (cID, userID, content, stamp) VALUES (cID, uID, content, CURRENT_TIMESTAMP) RETURNING *;
    ELSE
        RAISE EXCEPTION 'No canTalk perm';
    END IF;
END; $$
LANGUAGE PLPGSQL;

DROP FUNCTION IF EXISTS joinServer;
CREATE FUNCTION joinServer(sID integer, uID integer) RETURNS Table(
    messageID INT,
    channelID INT,
    userID INT,
    contents TEXT,
    stamp TIMESTAMP,
    pinned BOOLEAN,
    reactions TEXT[]
) AS $$
BEGIN

    INSERT INTO ChannelPermissions (userID, channelID) VALUES ();
    IF (SELECT canTalk FROM ChannelPermissions WHERE ChannelPermissions.channelID = cID AND ChannelPermissions.userID = uID) THEN
        RETURN QUERY INSERT INTO Messages (cID, userID, content, stamp) VALUES (cID, uID, content, CURRENT_TIMESTAMP) RETURNING *;
    ELSE
        RAISE EXCEPTION 'No canTalk perm';
    END IF;
END; $$
LANGUAGE PLPGSQL;

DROP FUNCTION IF EXISTS editMessage;
CREATE FUNCTION editMessage(content text, mID integer, uID integer, cID integer) RETURNS Table(
    messageID INT,
    channelID INT,
    userID INT,
    contents TEXT,
    stamp TIMESTAMP,
    pinned BOOLEAN,
    reactions TEXT[]
) AS $$
BEGIN
    SELECT canTalk FROM ChannelPermissions WHERE channelID = cID AND userID = uID;
    IF (canTalk) THEN
        RETURN QUERY UPDATE Messages SET content = content WHERE messageID = mID RETURNING *;
    ELSE
        RAISE EXCEPTION 'No canTalk perm';
    END IF;
END; $$
LANGUAGE PLPGSQL;

DROP FUNCTION IF EXISTS deleteMessage;
CREATE FUNCTION deleteMessage(mID integer, uID integer, cID integer, actor integer) RETURNS void AS $$
BEGIN
    SELECT canDeleteMessages FROM ChannelPermissions WHERE channelID = cID AND userID = actor;

    IF (canDeleteMessages OR uID = actor) THEN
        DELETE FROM Messages WHERE messageID = mID;
    ELSE
        RAISE EXCEPTION 'No deletemessage perm';
    END IF;
END; $$
LANGUAGE PLPGSQL;

DROP FUNCTION IF EXISTS pinMessage;
CREATE FUNCTION pinMessage(mID integer, cID integer, actor integer, toPin boolean) RETURNS Table(
    messageID INT,
    channelID INT,
    userID INT,
    contents TEXT,
    stamp TIMESTAMP,
    pinned BOOLEAN,
    reactions TEXT[]
) AS $$
BEGIN
    SELECT canPinMessages FROM ChannelPermissions WHERE channelID = cID AND userID = actor;

    IF (canPinMessages) THEN
        RETURN QUERY UPDATE Messages SET pinned = toPin WHERE messageID = mID RETURNING *;
    ELSE
        RAISE EXCEPTION 'No pinmessage perm';
    END IF;
END; $$
LANGUAGE PLPGSQL;