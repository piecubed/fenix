DROP TABLE IF EXISTS Users;

CREATE TABLE Users(
    userID uuid PRIMARY KEY,
    username TEXT NOT NULL,
    password BYTEA NOT NULL,
    email TEXT NOT NULL UNIQUE,
    salt BYTEA NOT NULL,
    settings JSON,
    token TEXT NOT NULL UNIQUE,
    usernameHash SERIAL UNIQUE,
    createdAt TIMESTAMP NOT NULL,
    verified BOOLEAN NOT NULL
);

DROP TABLE IF EXISTS Channels;
CREATE TABLE Channels(
    channelID uuid PRIMARY KEY,
    name TEXT NOT NULL,
    serverID INT NOT NULL,
    createdAt TIMESTAMP NOT NULL
);

DROP TABLE IF EXISTS FocusedItems;
CREATE TABLE FocusedItems (
    sessionID uuid PRIMARY KEY,
    serverID INT,
    channelID INT,
    userID INT
);

DROP TABLE IF EXISTS Servers;
CREATE TABLE Servers(
    serverID uuid PRIMARY KEY,
    ownerID INT NOT NULL,
    createdAt TIMESTAMP NOT NULL,
    name TEXT NOT NULL,
    icon TEXT,
    joinChannel INT
);

DROP TABLE IF EXISTS Messages;
CREATE TABLE Messages(
    messageID uuid PRIMARY KEY,
    channelID INT NOT NULL,
    userID INT NOT NULL,
    contents TEXT NOT NULL,
    stamp TIMESTAMP NOT NULL,
    pinned BOOLEAN NOT NULL DEFAULT FALSE
);

DROP TABLE IF EXISTS Reactions;
CREATE TABLE Reactions(
    reactionID uuid PRIMARY KEY,
    unicode TEXT NOT NULL,
    messageID INT NOT NULL,
    users INT[] NOT NULL
);

DROP TABLE IF EXISTS ServerRegistration;
CREATE TABLE ServerRegistration(
    userID INT NOT NULL,
    serverID INT NOT NULL,
    roles TEXT[] NOT NULL DEFAULT '{}',
    admin BOOLEAN NOT NULL DEFAULT FALSE,
    addChannels BOOLEAN NOT NULL DEFAULT FALSE,
    assignRoles BOOLEAN NOT NULL DEFAULT FALSE,
    kick BOOLEAN NOT NULL DEFAULT FALSE,
    ban BOOLEAN NOT NULL DEFAULT FALSE,
    changeNick BOOLEAN NOT NULL DEFAULT TRUE,
    changeOthersNick BOOLEAN NOT NULL DEFAULT FALSE
);

DROP TABLE IF EXISTS Roles;
CREATE TABLE Roles(
    roleID uuid PRIMARY KEY,
    serverID uuid NOT NULL,
    name TEXT NOT NULL,
    color TEXT NOT NULL
);

DROP TABLE IF EXISTS ChannelPermissions;
CREATE TABLE ChannelPermissions(
    userID uuid NOT NULL,
    channelID uuid NOT NULL,
    canRead BOOLEAN NOT NULL DEFAULT TRUE,
    canTalk BOOLEAN NOT NULL DEFAULT TRUE,
    canReadHistory BOOLEAN NOT NULL DEFAULT TRUE,
    canDeleteMessages BOOLEAN NOT NULL DEFAULT FALSE,
    canAddReactions BOOLEAN NOT NULL DEFAULT TRUE,
    canManageChannel BOOLEAN NOT NULL DEFAULT FALSE,
    canManagePermissions BOOLEAN NOT NULL DEFAULT FALSE,
    canPinMessages BOOLEAN NOT NULL DEFAULT FALSE,
    canMentionEveryone BOOLEAN NOT NULL DEFAULT TRUE
);

DROP TABLE IF EXISTS Bots;
CREATE TABLE Bots(
    botID uuid PRIMARY KEY,
    ownerID uuid NOT NULL,
    createdAt TIMESTAMP NOT NULL,
    username TEXT NOT NULL UNIQUE,
    token TEXT NOT NULL UNIQUE,
    ownerEmail TEXT NOT NULL
);

DROP FUNCTION IF EXISTS addReaction;
CREATE FUNCTION addReaction(mID uuid, uID uuid, emoji text) RETURNS Table(
    reactionID INT,
    unicode TEXT,
    messageID INT,
    users INT[]
) AS $$
DECLARE
    reactionID uuid;
BEGIN
    SELECT reactionID FROM Reactions WHERE messageID = mID AND unicode = emoji;

    IF reactionID = null THEN -- If there are no reactions, add a reaction row for this message.
        INSERT INTO Reactions(unicode, messageID, users) VALUES (emoji, mID, (uID)) RETURNING *;
    ELSE
        UPDATE Reactions SET users = array_append(uID) WHERE messageID = mID AND unicode = emoji;
    END IF;
END; $$
LANGUAGE PLPGSQL;

DROP FUNCTION IF EXISTS createRole;
CREATE FUNCTION createRole(roleName text, colorRGB text, sID uuid, actor TEXT) RETURNS Table(
    roleID uuid,
    serverID uuid,
    name TEXT,
    color TEXT
) AS $$
BEGIN
    SELECT assignRoles FROM ServerRegistration WHERE serverID = sID and userID = actor;
    IF (assignRoles) THEN
        RETURN QUERY INSERT INTO Roles (serverID, name, color) VALUES (sID, roleName, colorRGB) RETURNING *;
    ELSE
        RAISE EXCEPTION 'No assignroles perm';
    END IF;
END; $$
LANGUAGE PLPGSQL;

DROP FUNCTION IF EXISTS sendMessage;
CREATE FUNCTION sendMessage(cID uuid, uID uuid, cont text) RETURNS Table(
    messageID uuid,
    channelID uuid,
    userID uuid,
    contents TEXT,
    stamp TIMESTAMP,
    pinned BOOLEAN
) AS $$
DECLARE
    serverID uuid;
BEGIN
    IF (SELECT canTalk FROM ChannelPermissions WHERE ChannelPermissions.channelID = cID AND ChannelPermissions.userID = uID) THEN
        RETURN QUERY INSERT INTO Messages (channelID, userID, contents, stamp) VALUES (cID, uID, cont, CURRENT_TIMESTAMP) RETURNING *;
    ELSE
        RAISE EXCEPTION 'No canTalk perm';
    END IF;
END; $$
LANGUAGE PLPGSQL;

DROP FUNCTION IF EXISTS editMessage;
CREATE FUNCTION editMessage(content text, mID uuid, uID uuid, cID uuid) RETURNS Table(
    messageID uuid,
    channelID uuid,
    userID uuid,
    contents TEXT,
    stamp TIMESTAMP,
    pinned BOOLEAN,
    reactions TEXT[]
) AS $$
BEGIN
    SELECT canTalk FROM ChannelPermissions WHERE channelID = cID AND userID = uID;
    IF (canTalk) THEN
        RETURN QUERY UPDATE Messages SET content = content WHERE messageID = mID RETURNING *;
    ELSE
        RAISE EXCEPTION 'No canTalk perm';
    END IF;
END; $$
LANGUAGE PLPGSQL;

DROP FUNCTION IF EXISTS deleteMessage;
CREATE FUNCTION deleteMessage(mID uuid) RETURNS void AS $$
BEGIN
    DELETE FROM Messages WHERE messageID = mID;
END; $$
LANGUAGE PLPGSQL;

DROP FUNCTION IF EXISTS pinMessage;
CREATE FUNCTION pinMessage(mID uuid, cID uuid, actor text, toPin boolean) RETURNS Table(
    messageID uuid,
    channelID uuid,
    userID uuid,
    contents TEXT,
    stamp TIMESTAMP,
    pinned BOOLEAN,
    reactions TEXT[]
) AS $$
BEGIN
    SELECT canPinMessages FROM ChannelPermissions WHERE channelID = cID AND userID = actor;

    IF (canPinMessages) THEN
        RETURN QUERY UPDATE Messages SET pinned = toPin WHERE messageID = mID RETURNING *;
    ELSE
        RAISE EXCEPTION 'No pinmessage perm';
    END IF;
END; $$
LANGUAGE PLPGSQL;